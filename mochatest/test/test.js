const chaiModule = require('chai')
const expect = chaiModule.expect
const chaiHttp = require('chai-http')
const assert = require('assert') //additionarray
const {addition, additionarray} = require('./../function')
const getMoyenne = require('./../index')
const app = require('./../server')
// Patern / Modèle AAA => Arrange , Act , Assert
/* Cas boulangerie :
        Arrange : Pièces 2€  => Entrée / Input
        Act : Boulangère qui échange monnaie contre produit => Ce qui est fait / Function
        Assert : Baguette de pain => Ce qui est attendu et qui est testé - Sortie / Output
*/

const chai = chaiModule.use(chaiHttp)

describe('Addition - Unitaire', () => {
    describe('Number + Number', () => {
        it('should return a number', () => {
            expect(addition(1,2)).to.equal(3)
            assert.equal(addition(1,2),3)
            assert.equal(addition(4,5),9)
            assert.equal(addition(28,32),60)
            assert.equal(addition(50,50),100)
            assert.equal(addition(1,2),3)
            assert.equal(addition(4,5),9)
            assert.equal(addition(28,32),60)
            assert.equal(addition(50,50),100)
            assert.equal(addition(1,2),3)
            assert.equal(addition(4,5),9)
            assert.equal(addition(28,32),60)
            assert.equal(addition(50,50),100)
            assert.equal(addition(1,2),3)
            assert.equal(addition(4,5),9)
            assert.equal(addition(28,32),60)
            assert.equal(addition(50,50),100)
            assert.equal(addition(1,2),3)
            assert.equal(addition(4,5),9)
            assert.equal(addition(28,32),60)
            assert.equal(addition(50,50),100)
            assert.equal(addition(1,2),3)
            assert.equal(addition(4,5),9)
            assert.equal(addition(28,32),60)
            assert.equal(addition(50,50),100)
            assert.equal(addition(1,2),3)
            assert.equal(addition(4,5),9)
            assert.equal(addition(28,32),60)
            assert.equal(addition(50,50),100)
            assert.equal(addition(1,2),3)
            assert.equal(addition(4,5),9)
            assert.equal(addition(28,32),60)
            assert.equal(addition(50,50),100)
            assert.equal(addition(1,2),3)
            assert.equal(addition(4,5),9)
            assert.equal(addition(28,32),60)
            assert.equal(addition(50,50),100)
            assert.equal(addition(1,2),3)
            assert.equal(addition(4,5),9)
            assert.equal(addition(28,32),60)
            assert.equal(addition(50,50),100)
            assert.equal(addition(1,2),3)
            assert.equal(addition(4,5),9)
            assert.equal(addition(28,32),60)
            assert.equal(addition(50,50),100)
            assert.equal(addition(1,2),3)
            assert.equal(addition(4,5),9)
            assert.equal(addition(28,32),60)
            assert.equal(addition(50,50),100)
            assert.equal(addition(1,2),3)
            assert.equal(addition(4,5),9)
            assert.equal(addition(28,32),60)
            assert.equal(addition(50,50),100)
            assert.equal(addition(1,2),3)
            assert.equal(addition(4,5),9)
            assert.equal(addition(28,32),60)
            assert.equal(addition(50,50),100)
            assert.equal(addition(1,2),3)
            assert.equal(addition(4,5),9)
            assert.equal(addition(28,32),60)
            assert.equal(addition(50,50),100)
            assert.equal(addition(1,2),3)
            assert.equal(addition(4,5),9)
            assert.equal(addition(28,32),60)
            assert.equal(addition(50,50),100)
            assert.equal(addition(1,2),3)
            assert.equal(addition(4,5),9)
            assert.equal(addition(28,32),60)
            assert.equal(addition(50,50),100)
            assert.equal(addition(1,2),3)
            assert.equal(addition(4,5),9)
            assert.equal(addition(28,32),60)
            assert.equal(addition(50,50),100)
            assert.equal(addition(1,2),3)
            assert.equal(addition(4,5),9)
            assert.equal(addition(28,32),60)
            assert.equal(addition(50,50),100)
            assert.equal(addition(1,2),3)
            assert.equal(addition(4,5),9)
            assert.equal(addition(28,32),60)
            assert.equal(addition(50,50),100)
            assert.equal(addition(1,2),3)
            assert.equal(addition(4,5),9)
            assert.equal(addition(28,32),60)
            assert.equal(addition(50,50),100)
            assert.equal(addition(1,2),3)
            assert.equal(addition(4,5),9)
            assert.equal(addition(28,32),60)
            assert.equal(addition(50,50),100)
            assert.equal(addition(1,2),3)
            assert.equal(addition(4,5),9)
            assert.equal(addition(28,32),60)
            assert.equal(addition(50,50),100)
            assert.equal(addition(1,2),3)
            assert.equal(addition(4,5),9)
            assert.equal(addition(28,32),60)
            assert.equal(addition(50,50),100)
            assert.equal(addition(1,2),3)
            assert.equal(addition(4,5),9)
            assert.equal(addition(28,32),60)
            assert.equal(addition(50,50),100)
            assert.equal(addition(1,2),3)
            assert.equal(addition(4,5),9)
            assert.equal(addition(28,32),60)
            assert.equal(addition(50,50),100)
            assert.equal(addition(1,2),3)
            assert.equal(addition(4,5),9)
            assert.equal(addition(28,32),60)
            assert.equal(addition(50,50),100)
            assert.equal(addition(1,2),3)
            assert.equal(addition(4,5),9)
            assert.equal(addition(28,32),60)
            assert.equal(addition(50,50),100)
            assert.equal(addition(1,2),3)
            assert.equal(addition(4,5),9)
            assert.equal(addition(28,32),60)
            assert.equal(addition(50,50),100)
        })
    })
    describe('Number + String', () => {
        it('should return false', () => {
            assert.equal(addition(1,'Plot'),false)
            assert.equal(addition(4,'Plot'),false)
            assert.equal(addition(28,'Plot'),false)
            assert.equal(addition(50,'Plot'),false)
        })
    })
    describe('String + Number', () => {
        it('should return false', () => {
            assert.equal(addition('Plot',1),false)
            assert.equal(addition('Plot',4),false)
            assert.equal(addition('Plot',8),false)
            assert.equal(addition('Plot',0),false)
            assert.equal(addition('Plot',1),false)
            assert.equal(addition('Plot',4),false)
            assert.equal(addition('Plot',8),false)
            assert.equal(addition('Plot',0),false)
            assert.equal(addition('Plot',1),false)
            assert.equal(addition('Plot',4),false)
            assert.equal(addition('Plot',8),false)
            assert.equal(addition('Plot',0),false)
            assert.equal(addition('Plot',1),false)
            assert.equal(addition('Plot',4),false)
            assert.equal(addition('Plot',8),false)
            assert.equal(addition('Plot',0),false)
            assert.equal(addition('Plot',1),false)
            assert.equal(addition('Plot',4),false)
            assert.equal(addition('Plot',8),false)
            assert.equal(addition('Plot',0),false)
            assert.equal(addition('Plot',1),false)
            assert.equal(addition('Plot',4),false)
            assert.equal(addition('Plot',8),false)
            assert.equal(addition('Plot',0),false)
            assert.equal(addition('Plot',1),false)
            assert.equal(addition('Plot',4),false)
            assert.equal(addition('Plot',8),false)
            assert.equal(addition('Plot',0),false)
            assert.equal(addition('Plot',1),false)
            assert.equal(addition('Plot',4),false)
            assert.equal(addition('Plot',8),false)
            assert.equal(addition('Plot',0),false)
            assert.equal(addition('Plot',1),false)
            assert.equal(addition('Plot',4),false)
            assert.equal(addition('Plot',8),false)
            assert.equal(addition('Plot',0),false)
            assert.equal(addition('Plot',1),false)
            assert.equal(addition('Plot',4),false)
            assert.equal(addition('Plot',8),false)
            assert.equal(addition('Plot',0),false)
            assert.equal(addition('Plot',1),false)
            assert.equal(addition('Plot',4),false)
            assert.equal(addition('Plot',8),false)
            assert.equal(addition('Plot',0),false)
            assert.equal(addition('Plot',1),false)
            assert.equal(addition('Plot',4),false)
            assert.equal(addition('Plot',8),false)
            assert.equal(addition('Plot',0),false)
            assert.equal(addition('Plot',1),false)
            assert.equal(addition('Plot',4),false)
            assert.equal(addition('Plot',8),false)
            assert.equal(addition('Plot',0),false)
            assert.equal(addition('Plot',1),false)
            assert.equal(addition('Plot',4),false)
            assert.equal(addition('Plot',8),false)
            assert.equal(addition('Plot',0),false)
            assert.equal(addition('Plot',1),false)
            assert.equal(addition('Plot',4),false)
            assert.equal(addition('Plot',8),false)
            assert.equal(addition('Plot',0),false)
            assert.equal(addition('Plot',1),false)
            assert.equal(addition('Plot',4),false)
            assert.equal(addition('Plot',8),false)
            assert.equal(addition('Plot',0),false)
            assert.equal(addition('Plot',1),false)
            assert.equal(addition('Plot',4),false)
            assert.equal(addition('Plot',8),false)
            assert.equal(addition('Plot',0),false)
            assert.equal(addition('Plot',1),false)
            assert.equal(addition('Plot',4),false)
            assert.equal(addition('Plot',8),false)
            assert.equal(addition('Plot',0),false)
            assert.equal(addition('Plot',1),false)
            assert.equal(addition('Plot',4),false)
            assert.equal(addition('Plot',8),false)
            assert.equal(addition('Plot',0),false)
            assert.equal(addition('Plot',1),false)
            assert.equal(addition('Plot',4),false)
            assert.equal(addition('Plot',8),false)
            assert.equal(addition('Plot',0),false)
            assert.equal(addition('Plot',1),false)
            assert.equal(addition('Plot',4),false)
            assert.equal(addition('Plot',8),false)
            assert.equal(addition('Plot',0),false)
            assert.equal(addition('Plot',1),false)
            assert.equal(addition('Plot',4),false)
            assert.equal(addition('Plot',8),false)
            assert.equal(addition('Plot',0),false)
            assert.equal(addition('Plot',1),false)
            assert.equal(addition('Plot',4),false)
            assert.equal(addition('Plot',8),false)
            assert.equal(addition('Plot',0),false)
            assert.equal(addition('Plot',1),false)
            assert.equal(addition('Plot',4),false)
            assert.equal(addition('Plot',8),false)
            assert.equal(addition('Plot',0),false)
            assert.equal(addition('Plot',1),false)
            assert.equal(addition('Plot',4),false)
            assert.equal(addition('Plot',8),false)
            assert.equal(addition('Plot',0),false)
            assert.equal(addition('Plot',1),false)
            assert.equal(addition('Plot',4),false)
            assert.equal(addition('Plot',8),false)
            assert.equal(addition('Plot',0),false)
            assert.equal(addition('Plot',1),false)
            assert.equal(addition('Plot',4),false)
            assert.equal(addition('Plot',8),false)
            assert.equal(addition('Plot',0),false)
            assert.equal(addition('Plot',1),false)
            assert.equal(addition('Plot',4),false)
            assert.equal(addition('Plot',8),false)
            assert.equal(addition('Plot',0),false)
            assert.equal(addition('Plot',1),false)
            assert.equal(addition('Plot',4),false)
            assert.equal(addition('Plot',8),false)
            assert.equal(addition('Plot',0),false)
            assert.equal(addition('Plot',1),false)
            assert.equal(addition('Plot',4),false)
            assert.equal(addition('Plot',8),false)
            assert.equal(addition('Plot',0),false)
            assert.equal(addition('Plot',1),false)
            assert.equal(addition('Plot',4),false)
            assert.equal(addition('Plot',8),false)
            assert.equal(addition('Plot',0),false)
            assert.equal(addition('Plot',1),false)
            assert.equal(addition('Plot',4),false)
            assert.equal(addition('Plot',8),false)
            assert.equal(addition('Plot',0),false)
            assert.equal(addition('Plot',1),false)
            assert.equal(addition('Plot',4),false)
            assert.equal(addition('Plot',8),false)
            assert.equal(addition('Plot',0),false)
        })
    })
    describe('Negative Number + Negative Number', () => {
        it('should return a number', () => {
            assert.equal(addition(-1,-1),-2)
            assert.equal(addition(-5,4),-1)
        })
    })
    describe('Not a Number + Number', () => {
        it('should return a number', () => {
            assert.equal(addition(NaN,-1),false)
            assert.equal(addition(NaN,4),false)
        })
    })
    describe('Floating Number + Number', () => {
        it('should return a number', () => {
            assert.equal(addition(1.7,-1),0.7)
            //assert.equal(addition(0.1,0.2),0.3)
            expect(addition(0.1,0.2)).to.be.closeTo(0.3, 0.0001)
            // 0.30000000000000004 !== 0.3
            assert.equal(addition(5.9,4),9.9)
            assert.equal(addition(1.7,-1),0.7)
            assert.equal(addition(5.9,4),9.9)
            assert.equal(addition(1.7,-1),0.7)
            assert.equal(addition(5.9,4),9.9)
            assert.equal(addition(1.7,-1),0.7)
            assert.equal(addition(5.9,4),9.9)
            assert.equal(addition(1.7,-1),0.7)
            assert.equal(addition(5.9,4),9.9)
            assert.equal(addition(1.7,-1),0.7)
            assert.equal(addition(5.9,4),9.9)
            assert.equal(addition(1.7,-1),0.7)
            assert.equal(addition(5.9,4),9.9)
            assert.equal(addition(1.7,-1),0.7)
            assert.equal(addition(5.9,4),9.9)
            assert.equal(addition(1.7,-1),0.7)
            assert.equal(addition(5.9,4),9.9)
            assert.equal(addition(1.7,-1),0.7)
            assert.equal(addition(5.9,4),9.9)
            assert.equal(addition(1.7,-1),0.7)
            assert.equal(addition(5.9,4),9.9)
            assert.equal(addition(1.7,-1),0.7)
            assert.equal(addition(5.9,4),9.9)
            assert.equal(addition(1.7,-1),0.7)
            assert.equal(addition(5.9,4),9.9)
            assert.equal(addition(1.7,-1),0.7)
            assert.equal(addition(5.9,4),9.9)
            assert.equal(addition(1.7,-1),0.7)
            assert.equal(addition(5.9,4),9.9)
            assert.equal(addition(1.7,-1),0.7)
            assert.equal(addition(5.9,4),9.9)
            assert.equal(addition(1.7,-1),0.7)
            assert.equal(addition(5.9,4),9.9)
            assert.equal(addition(1.7,-1),0.7)
            assert.equal(addition(5.9,4),9.9)
            assert.equal(addition(1.7,-1),0.7)
            assert.equal(addition(5.9,4),9.9)
            assert.equal(addition(1.7,-1),0.7)
            assert.equal(addition(5.9,4),9.9)
            assert.equal(addition(1.7,-1),0.7)
            assert.equal(addition(5.9,4),9.9)
            assert.equal(addition(1.7,-1),0.7)
            assert.equal(addition(5.9,4),9.9)
            assert.equal(addition(1.7,-1),0.7)
            assert.equal(addition(5.9,4),9.9)
            assert.equal(addition(1.7,-1),0.7)
            assert.equal(addition(5.9,4),9.9)
            assert.equal(addition(1.7,-1),0.7)
            assert.equal(addition(8512.58,8512.58),8512.58+8512.58)
        })
    })
})

describe('Addition Array - Intégration', () => {
    describe('Number + Number + Number', () => {
        it('should return a number', () => {
            expect(additionarray([1,2,3])).to.equal(6)
            expect(additionarray([4,5,6])).to.equal(15)
        })
    })
    describe('Number', () => {
        it('should return a number', () => {
            expect(additionarray(2)).to.equal(2)
            expect(additionarray(3)).to.equal(3)
        })
    })
    describe('String', () => {
        it('should return false', () => {
            expect(additionarray('Hello')).to.equal(false)
            expect(additionarray('There')).to.equal(false)
        })
    })
    describe('Array of string', () => {
        it('should return a number', () => {
            expect(additionarray(['the','lol'])).to.equal(false)
            expect(additionarray(['the','lol'])).to.equal(false)
            expect(additionarray(['the','lol','men'])).to.equal(false)
            //expect(additionarray(['the','lol','men',4,5,8])).to.equal(false)
        })
    })
    describe('Array of types', () => {
        it('should return a number', () => {
            expect(additionarray(['the','lol','men',4,5,8])).to.equal(17)
        })
    })
})

describe('Test API Notes', () => {
    it('Should return json with statut code 200', (done) => {
        chai.request(app)
            .get('/data')
            .end((err, res) => {
                expect(res).to.have.status(200)
                expect(res.body).to.be.an('object')
                done()
            })
    })
    it('Should return statut code 404', (done) => {
        chai.request(app)
            .get('/datas')
            .end((err, res) => {
                expect(res).to.have.status(404)
                done()
            })
    })
})


describe('Moyenne de note - Fonctionnel', () => {
    describe('Base JSON', () => {
        it('should return the average', async () => {
            expect(await getMoyenne()).to.be.closeTo(13.41, 0.01)
            expect(await getMoyenne()).to.not.be.closeTo(13.41, 0.001)
        })
    })
})

//jest

/*
describe('Tests de la fonction addition', () => {
    test.each([
        [1,2,3],
        [0,0,0],
        [-1,-4,-5],
        [-2,3,1]
    ])('Addition(%i, %i) doit retourner %i', (a, b, total) => {
        expect(addition(a,b)).toBe(total)
    })
})
*/